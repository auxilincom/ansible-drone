- name: run drone server
  docker_container:
    name: drone-server
    image: "drone/drone:{{ drone_version }}"
    state: started
    restart_policy: always
    published_ports:
      - "8000:80"
      - "9000:443"
    volumes:
      - /drone:/var/lib/drone/
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - name: "{{ network_name }}"
    env:
      DRONE_GITHUB_CLIENT_ID: "{{ drone_github_client }}"
      DRONE_GITHUB_SECRET: "{{ drone_github_secret }}"
      DRONE_GITHUB_SERVER: "{{ drone_github_server }}"
      DRONE_GIT_ALWAYS_AUTH: "{{ drone_git_always_auth }}"
      DRONE_RUNNER_CAPACITY: "{{ drone_runner_capacity }}"
      DRONE_SERVER_PROTO: "{{ drone_server_proto }}"
      DRONE_SERVER_HOST: "{{ drone_server_host }}"
      DRONE_TLS_AUTOCERT: "{{ drone_tls_autocert }}"
      DRONE_LOGS_DEBUG: "true"
      DRONE_RPC_SECRET: "{{ drone_secret }}"
      DRONE_DATABASE_DRIVER: postgres
      DRONE_DATABASE_DATASOURCE: "postgres://{{ drone_postgress_user }}:{{ drone_postgress_password }}\
        @{{ drone_postgres_host if use_remote_drone_postgres else 'postgres' }}:\
        {{ drone_postgres_port }}/{{ drone_postgress_db }}?sslmode=disable"
      DRONE_USER_FILTER: "{{ drone_users }}"
      DRONE_USER_CREATE: "{{ drone_admins }}"
      DRONE_GITHUB_SKIP_VERIFY: "true"
      DRONE_DATABASE_SECRET: "{{ drone_database_secret }}"
  tags:
    - drone
    - server

- name: run drone agent
  docker_container:
    name: "agent-{{ item.name }}"
    image: "drone/agent:{{ drone_version }}"
    privileged: yes
    state: started
    restart_policy: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - name: "{{ network_name }}"
    env:
      DRONE_RPC_SERVER: "drone-server:8000"
      DRONE_RPC_SECRET: "{{ drone_secret }}"
      DRONE_RUNNER_NAME: "{{ item.name }}"
      DRONE_RUNNER_CAPACITY: "{{ drone_runner_capacity }}"
      DRONE_LOGS_DEBUG: "true"
  with_items: "{{ drone_agents }}"
  tags:
    - drone
    - agent
